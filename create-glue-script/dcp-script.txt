import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "dcp", table_name = "dcp-glue-landing", transformation_ctx = "DataSource0"]
## @return: DataSource0
## @inputs: []
DataSource0 = glueContext.create_dynamic_frame.from_catalog(database = "dcp", table_name = "dcp-glue-landing", transformation_ctx = "DataSource0")
## @type: ApplyMapping
## @args: [mappings = [("schemaversion", "string", "schemaversion", "string"), ("id", "string", "id", "string"), ("accountid", "string", "accountid", "string"), ("partition", "string", "partition", "string"), ("region", "string", "region", "string"), ("severity.score", "string", "severity.score", "string"), ("severity.description", "string", "severity.description", "string"), ("createdat", "string", "createdat", "string"), ("resourcesaffected.s3Bucket.arn", "string", "resourcesaffected.s3Bucket.arn", "string"), ("resourcesaffected.s3Bucket.name", "string", "resourcesaffected.s3Bucket.name", "string"), ("resourcesaffected.s3Bucket.createdAt", "string", "resourcesaffected.s3Bucket.createdAt", "string"), ("resourcesaffected.s3Bucket.owner.displayName", "string", "resourcesaffected.s3Bucket.owner.displayName", "string"), ("resourcesaffected.s3Bucket.owner.id", "string", "resourcesaffected.s3Bucket.owner.id", "string"), ("resourcesaffected.s3Bucket.tags", "array", "resourcesaffected.s3Bucket.tags", "array"), ("resourcesaffected.s3Bucket.defaultServerSideEncryption.encryptionType", "string", "resourcesaffected.s3Bucket.defaultServerSideEncryption.encryptionType", "string"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicReadAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicReadAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicWriteAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicWriteAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicReadAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicReadAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicWriteAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicWriteAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.effectivePermission", "string", "resourcesaffected.s3Bucket.publicAccess.effectivePermission", "string"), ("resourcesaffected.s3Object.bucketArn", "string", "resourcesaffected.s3Object.bucketArn", "string"), ("resourcesaffected.s3Object.key", "string", "resourcesaffected.s3Object.key", "string"), ("resourcesaffected.s3Object.path", "string", "resourcesaffected.s3Object.path", "string"), ("resourcesaffected.s3Object.extension", "string", "resourcesaffected.s3Object.extension", "string"), ("resourcesaffected.s3Object.lastModified", "string", "resourcesaffected.s3Object.lastModified", "string"), ("resourcesaffected.s3Object.eTag", "string", "resourcesaffected.s3Object.eTag", "string"), ("resourcesaffected.s3Object.serverSideEncryption.encryptionType", "string", "resourcesaffected.s3Object.serverSideEncryption.encryptionType", "string"), ("resourcesaffected.s3Object.size", "string", "resourcesaffected.s3Object.size", "string"), ("resourcesaffected.s3Object.storageClass", "string", "resourcesaffected.s3Object.storageClass", "string"), ("resourcesaffected.s3Object.publicAccess", "boolean", "resourcesaffected.s3Object.publicAccess", "boolean"), ("category", "string", "category", "string"), ("classificationdetails.jobArn", "string", "classificationdetails.jobArn", "string"), ("classificationdetails.result.status.code", "string", "classificationdetails.result.status.code", "string"), ("classificationdetails.result.sizeClassified", "string", "classificationdetails.result.sizeClassified", "string"), ("classificationdetails.result.mimeType", "string", "classificationdetails.result.mimeType", "string"), ("classificationdetails.result.sensitiveData", "array", "classificationdetails.result.sensitiveData", "array"), ("classificationdetails.detailedResultsLocation", "string", "classificationdetails.detailedResultsLocation", "string"), ("classificationdetails.jobId", "string", "classificationdetails.jobId", "string"), ("type", "string", "type", "string"), ("title", "string", "title", "string"), ("description", "string", "description", "string")], transformation_ctx = "Transform0"]
## @return: Transform0
## @inputs: [frame = DataSource0]
Transform0 = ApplyMapping.apply(frame = DataSource0, mappings = [("schemaversion", "string", "schemaversion", "string"), ("id", "string", "id", "string"), ("accountid", "string", "accountid", "string"), ("partition", "string", "partition", "string"), ("region", "string", "region", "string"), ("severity.score", "string", "severity.score", "string"), ("severity.description", "string", "severity.description", "string"), ("createdat", "string", "createdat", "string"), ("resourcesaffected.s3Bucket.arn", "string", "resourcesaffected.s3Bucket.arn", "string"), ("resourcesaffected.s3Bucket.name", "string", "resourcesaffected.s3Bucket.name", "string"), ("resourcesaffected.s3Bucket.createdAt", "string", "resourcesaffected.s3Bucket.createdAt", "string"), ("resourcesaffected.s3Bucket.owner.displayName", "string", "resourcesaffected.s3Bucket.owner.displayName", "string"), ("resourcesaffected.s3Bucket.owner.id", "string", "resourcesaffected.s3Bucket.owner.id", "string"), ("resourcesaffected.s3Bucket.tags", "array", "resourcesaffected.s3Bucket.tags", "array"), ("resourcesaffected.s3Bucket.defaultServerSideEncryption.encryptionType", "string", "resourcesaffected.s3Bucket.defaultServerSideEncryption.encryptionType", "string"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicReadAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicReadAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicWriteAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicWriteAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicReadAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicReadAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicWriteAccess", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicWriteAccess", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.ignorePublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.restrictPublicBuckets", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicAcls", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean", "resourcesaffected.s3Bucket.publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicPolicy", "boolean"), ("resourcesaffected.s3Bucket.publicAccess.effectivePermission", "string", "resourcesaffected.s3Bucket.publicAccess.effectivePermission", "string"), ("resourcesaffected.s3Object.bucketArn", "string", "resourcesaffected.s3Object.bucketArn", "string"), ("resourcesaffected.s3Object.key", "string", "resourcesaffected.s3Object.key", "string"), ("resourcesaffected.s3Object.path", "string", "resourcesaffected.s3Object.path", "string"), ("resourcesaffected.s3Object.extension", "string", "resourcesaffected.s3Object.extension", "string"), ("resourcesaffected.s3Object.lastModified", "string", "resourcesaffected.s3Object.lastModified", "string"), ("resourcesaffected.s3Object.eTag", "string", "resourcesaffected.s3Object.eTag", "string"), ("resourcesaffected.s3Object.serverSideEncryption.encryptionType", "string", "resourcesaffected.s3Object.serverSideEncryption.encryptionType", "string"), ("resourcesaffected.s3Object.size", "string", "resourcesaffected.s3Object.size", "string"), ("resourcesaffected.s3Object.storageClass", "string", "resourcesaffected.s3Object.storageClass", "string"), ("resourcesaffected.s3Object.publicAccess", "boolean", "resourcesaffected.s3Object.publicAccess", "boolean"), ("category", "string", "category", "string"), ("classificationdetails.jobArn", "string", "classificationdetails.jobArn", "string"), ("classificationdetails.result.status.code", "string", "classificationdetails.result.status.code", "string"), ("classificationdetails.result.sizeClassified", "string", "classificationdetails.result.sizeClassified", "string"), ("classificationdetails.result.mimeType", "string", "classificationdetails.result.mimeType", "string"), ("classificationdetails.result.sensitiveData", "array", "classificationdetails.result.sensitiveData", "array"), ("classificationdetails.detailedResultsLocation", "string", "classificationdetails.detailedResultsLocation", "string"), ("classificationdetails.jobId", "string", "classificationdetails.jobId", "string"), ("type", "string", "type", "string"), ("title", "string", "title", "string"), ("description", "string", "description", "string")], transformation_ctx = "Transform0")
## @type: DataSink
## @args: [connection_type = "s3", format = "parquet", connection_options = {"path": "s3://GLUE_CURATED_BUCKET/", "compression": "gzip", "partitionKeys": []}, transformation_ctx = "DataSink0"]
## @return: DataSink0
## @inputs: [frame = Transform0]
DataSink0 = glueContext.write_dynamic_frame.from_options(frame = Transform0, connection_type = "s3", format = "parquet", connection_options = {"path": "s3://GLUE_CURATED_BUCKET/", "compression": "gzip", "partitionKeys": []}, transformation_ctx = "DataSink0")
job.commit()